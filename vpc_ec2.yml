AWSTemplateFormatVersion: '2010-09-09'
Parameters:
    SecurityGroupDescription:
       Description: Security Group Description
       Type: String
    KeyName:
       Description: Key Pair for EC2
       Type: 'AWS::EC2::KeyPair::KeyName'
    LoadScheme: 
       Description: Scheme to internet facing public address and internal to ip private address
       Type: String
       AllowedValues: 
          - internal
          - internet-facing
    EnvType:
       Description: Env type of enviroment
       Type: String
       Default: test
       AllowedValues: [test,  prod]
Conditions:
    CreateProdResources: 
         - !Equals  [!Ref EnvType, "prod"]
Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 10.0.0.0/16
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
               - Key: Name
                 Value: VPC1
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: VPC Internet Gateway
    AttachGateway:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref VPC
            InternetGatewayId: !Ref InternetGateway
        DependsOn: InternetGateway 
    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: 10.0.1.0/24
            AvailabilityZone: eu-central-1a
            MapPublicIpOnLaunch: true
            Tags:
               - Key: Name
                 Value: Public Subnet 1
        DependsOn: VPC
    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: 10.0.2.0/24
            AvailabilityZone: eu-central-1a
            MapPublicIpOnLaunch: false
            Tags:
               - Key: Name
                 Value: Private Subnet 1
        DependsOn: VPC
    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: 10.0.3.0/24
            AvailabilityZone: eu-central-1b
            MapPublicIpOnLaunch: true
            Tags:
               - Key: Name
                 Value: Public Subnet 2
        DependsOn: VPC
    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: 10.0.4.0/24
            AvailabilityZone: eu-central-1b
            Tags:
               - Key: Name
                 Value: Private Subnet 2
        DependsOn: VPC
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
               - Key: Name
                 Value: Public Route Table
        DependsOn: VPC
    PublicRoute:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
        DependsOn: 
              - PublicRouteTable
              - InternetGateway
    PublicSubnetRouteTableAssociation1:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnet1
            RouteTableId: !Ref PublicRouteTable
        DependsOn: 
              - PublicSubnet1
              - PublicRouteTable
    PublicSubnetRouteTableAssociation2:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnet2
            RouteTableId: !Ref PublicRouteTable
        DependsOn: 
              - PublicSubnet1
              - PublicRouteTable
    PrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags: 
               - Key: Name
                 Value: Private Route Table
        DependsOn: VPC
    PrivateSubnetRouteTableAssociation1:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PrivateSubnet1
            RouteTableId: !Ref PrivateRouteTable
        DependsOn: 
              - PrivateSubnet1
              - PrivateRouteTable
    PrivateSubnetRouteTableAssociation2:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PrivateSubnet2
            RouteTableId: !Ref PrivateRouteTable
        DependsOn: 
              - PrivateSubnet2
              - PrivateRouteTable
    EC2Instance1:
        Type: AWS::EC2::Instance
        Properties:
            ImageId: ami-04c921614424b07cd 
            InstanceType: t2.nano
            SecurityGroupIds:
               - !Ref  EC2SecurityGroup
            SubnetId: !Ref PublicSubnet1
            KeyName: !Ref KeyName
            UserData:
               Fn::Base64: !Sub |
                                 #!/bin/bash
                                 yum update -y
                                 yum install -y httpd
                                 systemctl start httpd
                                 systemctl enable httpd
                                 #echo "<h1>Hello from Region us-east-2b</h1>" > /var/www/html/index.html
        DependsOn: 
              - EC2SecurityGroup
              - PublicSubnet1
    EC2Instance2:
        Type: AWS::EC2::Instance
        Properties:
            ImageId: ami-04c921614424b07cd
            InstanceType: t2.nano
            SecurityGroupIds:
               - !Ref EC2SecurityGroup
            SubnetId: !Ref PublicSubnet2
            KeyName: !Ref KeyName
            UserData:
             Fn::Base64: !Sub |
                              #!/bin/bash
                              yum update -y
                              yum install -y httpd
                              systemctl start httpd
                              systemctl enable httpd
                              #echo "<h1>Hello from Region us-east-2b</h1>" > /var/www/html/index.html
        DependsOn: 
              - EC2SecurityGroup
              - PublicSubnet2
    ELBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: !Ref SecurityGroupDescription
            VpcId: !Ref VPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
        DependsOn: 
              -  VPC
    EC2SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: !Ref SecurityGroupDescription
            VpcId: !Ref VPC
            SecurityGroupIngress:
               - IpProtocol: tcp
                 FromPort: 80
                 ToPort: 80
                 SourceSecurityGroupId:
                    Fn::GetAtt:
                       - ELBSecurityGroup
                       - GroupId
               - IpProtocol: tcp
                 FromPort: 22
                 ToPort: 22
                 CidrIp: 0.0.0.0/0
        DependsOn: 
              -  VPC
    EC2TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 15
            HealthyThresholdCount: 5
            Matcher:
               HttpCode: '200'
            Name: EC2TargetGroup
            Port: 80
            Protocol: HTTP
            TargetGroupAttributes: 
               - Key: deregistration_delay.timeout_seconds
                 Value: '20'
            Targets:
            - Id: !Ref EC2Instance1
              Port: 80
            - Id: !Ref EC2Instance2
              Port: 80
            UnhealthyThresholdCount: 3
            VpcId: !Ref VPC
        DependsOn: 
              - VPC
              - EC2Instance1
              - EC2Instance2
    ALBListerner:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
              - Type: forward
                TargetGroupArn: !Ref  EC2TargetGroup
            LoadBalancerArn: !Ref ApplicationLoadBalancer
            Port: 80
            Protocol: HTTP
        DependsOn: 
              - EC2TargetGroup
              - ApplicationLoadBalancer
    ApplicationLoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Scheme: !Ref LoadScheme
            Subnets:
               - !Ref PublicSubnet1
               - !Ref PublicSubnet2
            SecurityGroups:
               - !GetAtt ELBSecurityGroup.GroupId 
        DependsOn: 
              - PublicSubnet1
              - PublicSubnet2
              - ELBSecurityGroup
    MountPoint:
        Type: AWS::EC2::VolumeAttachment
        Condition: CreateProdResources
        Properties:
            InstanceId: !Ref EC2Instance1
            VolumeId: !Ref NewVolume
            Device: "/dev/sdh"
    NewVolume:
        Type: AWS::EC2::Volume
        Condition: CreateProdResources
        Properties:
           Size: 100
           Encrypted: true
           AvailabilityZone:
               !GetAtt: EC2Instance1.AvailabilityZone
           DeletionPolicy: Snapshot

                   


    
    
